# (Module for file analysis)

import subprocess
import pefile
from utilities import CalculateHashes, UploadToVirustotal

def AnalyzeFile(filePath, apiKey):
    """
    Analyze file by calculating hashes and uploading to VirusTotal.
    :param file_path: Path to the file.
    :param api_key: VirusTotal API key.
    :return: Hashes and VirusTotal result.
    """
    hashes = CalculateHashes(filePath)
    vtResult = UploadToVirustotal(filePath, apiKey)
    return hashes, vtResult

def ExtractStrings(filePath):
    """
    Extract strings from the file.
    :param file_path: Path to the file.
    :return: List of strings found in the file.
    """
    result = subprocess.run(['strings', filePath], capture_output=True, text=True)
    return result.stdout.splitlines()

def GetPeInfo(filePath):
    """
    Extract PE file information.
    :param file_path: Path to the file.
    :return: Dictionary with PE file information.
    """
    pe = pefile.PE(filePath)
    info = {
        'timestamp': pe.FILE_HEADER.TimeDateStamp,
        'sections': [
            {
                'name': section.Name.decode().strip(),
                'virtual_size': section.Misc_VirtualSize,
                'raw_size': section.SizeOfRawData,
            }
            for section in pe.sections
        ],
        'imports': [
            {
                'dll': entry.dll.decode(),
                'functions': [imp.name.decode() for imp in entry.imports if imp.name]
            }
            for entry in pe.DIRECTORY_ENTRY_IMPORT
        ] if hasattr(pe, 'DIRECTORY_ENTRY_IMPORT') else []
    }
    return info

def DetectPacking(peInfo):
    """
    Detect if the file is packed or obfuscated.
    :param pe_info: PE file information.
    :return: Boolean indicating if the file is packed.
    """
    packed = False
    sectionInfo = peInfo['sections']
    if any(section['raw_size'] < section['virtual_size'] for section in sectionInfo):
        packed = True
    return packed

def AnalyzeImports(imports):
    """
    Analyze imported functions for suspicious behavior.
    :param imports: List of imports.
    :return: List of suspicious imports.
    """
    suspiciousFunctions = ['LoadLibrary', 'GetProcAddress']
    suspiciousImports = []
    for entry in imports:
        for func in entry['functions']:
            if any(susp_func in func for susp_func in suspiciousFunctions):
                suspiciousImports.append(func)
    return suspiciousImports
