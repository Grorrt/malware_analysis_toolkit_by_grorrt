# (Report generation)

import matplotlib.pyplot as mp

def GenerateReport(filePath, hashes, vtResult, peInfo, strings, packed, suspiciousImports):
    """
    Generate a report from the analysis results.
    :param file_path: Path to the file.
    :param hashes: Hash values.
    :param vt_result: VirusTotal analysis result.
    :param pe_info: PE file information.
    :param strings: Extracted strings.
    :param packed: Boolean indicating if the file is packed.
    :param suspicious_imports: List of suspicious imports.
    :return: Dictionary containing the report.
    """
    report = {
        'file_path': filePath,
        'hashes': hashes,
        'virustotal': vtResult,
        'pe_info': peInfo,
        'strings': strings[:10],  # First 10 strings for brevity
        'packed': packed,
        'suspicious_imports': suspiciousImports
    }
    return report

def VisualizeReport(report):
    """
    Visualize the analysis report.
    :param report: The analysis report dictionary.
    """
    filePath = report['file_path']
    hashes = report['hashes']
    peInfo = report['pe_info']
    packed = report['packed']
    suspiciousImports = report['suspicious_imports']

    fig, ax = mp.subplots(2, 2, figsize=(15, 10))

    # File hashes
    ax[0, 0].bar(hashes.keys(), hashes.values())
    ax[0, 0].set_title('File Hashes')
    ax[0, 0].set_ylabel('Hash Value')

    # PE sections
    section_names = [section['name'] for section in peInfo['sections']]
    section_raw_sizes = [section['raw_size'] for section in peInfo['sections']]
    section_virtual_sizes = [section['virtual_size'] for section in peInfo['sections']]
    ax[0, 1].barh(section_names, section_raw_sizes, color='cyan', label='Raw Size')
    ax[0, 1].barh(section_names, section_virtual_sizes, left=section_raw_sizes, color='orange', label='Virtual Size')
    ax[0, 1].set_title('PE Sections (Sizes)')
    ax[0, 1].set_xlabel('Size in Bytes')
    ax[0, 1].legend()

    # Packing detection
    packed_text = 'Packed' if packed else 'Not Packed'
    ax[1, 0].text(0.5, 0.5, packed_text, fontsize=18, ha='center', va='center', 
                  bbox=dict(facecolor='green' if not packed else 'red', alpha=0.5))
    ax[1, 0].set_title('Packing Detection')
    ax[1, 0].axis('off')

    # Suspicious imports
    ax[1, 1].barh(suspiciousImports, [1] * len(suspiciousImports))
    ax[1, 1].set_title('Suspicious Imports')
    ax[1, 1].set_xlabel('Detected')
    ax[1, 1].set_xlim(0, 1)
    ax[1, 1].set_yticks([])

    fig.suptitle(f'Malware Analysis Report: {filePath}', fontsize=15)
    mp.tight_layout()
    mp.subplots_adjust(top=0.88)
    mp.show()
