/*
    YARA rules to detect common indicators of malicious behavior in files.
*/

import "hash"

rule Detect_Malicious_Strings {
    meta:
        description = "Detects specific strings often found in malicious code"
    strings:
        $malicious_string1 = "malicious_function1"
        $malicious_string2 = "evil_payload_marker"
        $malicious_string3 = "cmd.exe /c"
        $malicious_string4 = "powershell.exe -nop -exec bypass"

    condition:
        any of ($malicious_string*)
}

rule Detect_Executable_Packers {
    meta:
        description = "Detects common executable packers used by malware"
    strings:
        $upx_signature = "UPX0" wide ascii
        $pecompact_signature = "PECompact" wide ascii
        $themida_signature = "Themida" wide ascii

    condition:
        any of ($upx_signature, $pecompact_signature, $themida_signature)
}

rule Detect_Base64_Encoded_Strings {
    meta:
        description = "Detects base64-encoded strings commonly used in malware"
    strings:
        $base64_string1 = /[A-Za-z0-9+\/]{100,}={0,2}/
        $base64_string2 = /[A-Za-z0-9+\/]{200,}={0,2}/

    condition:
        any of ($base64_string*)
}

/*
rule Detect_External_IP_Communication {
    meta:
        description = "Detects external IP addresses used for communication"
    strings:
        $ip_address = /(?:\d{1,3}\.){3}\d{1,3}/

    condition:
        $ip_address
}
*/

rule Detect_Malicious_Registry_Keys {
    meta:
        description = "Detects suspicious registry keys commonly used by malware"
    strings:
        $malicious_key1 = "HKEY_LOCAL_MACHINE\\Software\\Malware" wide ascii
        $malicious_key2 = "HKEY_CURRENT_USER\\Software\\EvilCorp" wide ascii

    condition:
        any of ($malicious_key*)
}

rule Detect_Executable_Dropper {
    meta:
        description = "Detects files commonly used as droppers or downloaders"
    strings:
        $dropper_extension = /(exe|dll|scr|bat|vbs)$/ nocase
        $http_download_string = "http://" ascii wide

    condition:
        $dropper_extension and $http_download_string
}

rule Detect_Large_ASCII_Strings {
    meta:
        description = "Detects files containing large ASCII strings"
    strings:
        $large_ascii_string = /[ -~]{1000,}/

    condition:
        $large_ascii_string
}

rule Detect_Macro_Enabled_Documents {
    meta:
        description = "Detects macro-enabled Office documents"
    strings:
        $macro_indicator = "Macro" wide ascii
        $macro_function = "ShellExecute" wide ascii

    condition:
        $macro_indicator and $macro_function
}

rule Detect_Packed_Malware {
    meta:
        description = "Detects suspicious packed or obfuscated executables"
    condition:
        filesize < 1MB and hash.md5(0, filesize) == "89d9417d83d21976d81a19daefb6e5e6"
}

rule Detect_Ransomware_Behavior {
    meta:
        description = "Detects indicators of ransomware behavior"
    strings:
        $ransomware_marker = "Your files are encrypted"
        $bitcoin_wallet_address = /[13][a-km-zA-HJ-NP-Z1-9]{25,34}/

    condition:
        any of ($ransomware_marker, $bitcoin_wallet_address)
}

rule Detect_Embedded_Payload {
    meta:
        description = "Detects files with embedded or encoded payloads"
    strings:
        $embedded_marker = "BEGIN CERTIFICATE" wide ascii
        $encoded_payload_marker = "eval(base64_decode(" wide ascii

    condition:
        any of ($embedded_marker, $encoded_payload_marker)
}

rule Detect_Reverse_Shell_Payload {
    meta:
        description = "Detects reverse shell payloads"
    strings:
        $reverse_shell_indicator = "nc -e /bin/sh" wide ascii
        $reverse_shell_function = "socket.connect" wide ascii

    condition:
        any of ($reverse_shell_indicator, $reverse_shell_function)
}

rule Detect_Tor_Network_Communication {
    meta:
        description = "Detects communication over Tor network"
    strings:
        $tor_circuit_setup = "Circuit established" wide ascii
        $tor_exit_node = ".onion" wide ascii

    condition:
        any of ($tor_circuit_setup, $tor_exit_node)
}

rule Detect_Stealthy_Execution {
    meta:
        description = "Detects techniques used for stealthy execution"
    strings:
        $stealthy_exe_marker = "cmd.exe /c"
        $powerShell_execution = "powershell.exe -nop -exec bypass"

    condition:
        any of ($stealthy_exe_marker, $powerShell_execution)
}

rule Detect_Heap_Spraying_Technique {
    meta:
        description = "Detects heap spraying technique used in exploits"
    strings:
        $heap_spray_pattern = { 00 01 02 03 04 05 06 07 }

    condition:
        // Check for heap spraying pattern within file
        $heap_spray_pattern
}


rule Detect_Malicious_URL_Patterns {
    meta:
        description = "Detects patterns indicative of malicious URLs"
    strings:
        $malicious_url_pattern1 = "malware.com" wide ascii
        $malicious_url_pattern2 = "evilserver.org" wide ascii

    condition:
        any of ($malicious_url_pattern*)
}

rule Detect_Reflective_DLL_Loading {
    meta:
        description = "Detects reflective DLL loading technique"
    strings:
        $reflective_dll_marker = "GetProcAddress" wide ascii

    condition:
        $reflective_dll_marker
}

rule Detect_Web_Shell_Backdoor {
    meta:
        description = "Detects web shell backdoor indicators"
    strings:
        $web_shell_indicator = "WebShell" wide ascii
        $web_shell_function = "exec(\"cmd.exe\""

    condition:
        any of ($web_shell_indicator, $web_shell_function)
}

rule Detect_Cryptojacking_Miner {
    meta:
        description = "Detects indicators of cryptojacking activity"
    strings:
        $cryptojacking_marker = "CoinHive" wide ascii
        $cryptominer_function = "mine_crypto" wide ascii

    condition:
        any of ($cryptojacking_marker, $cryptominer_function)
}
